
% VERTEX file for Component: $name


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% 
%    PLEASE NOTE: This export is still in development
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

classdef PointNeuronModel_${name} < PointNeuronModel

  %PointNeuronModel_${name} equivalent to the ${name} in LEMS
#foreach ($par in $parameters.keySet())
  %  - $par .. 
#end
  
  properties (SetAccess = private)
#foreach ($s in $state.keySet())
    #if (($s != "V") && ($s != "v"))
      $s 
    #end
#end
      spikes
  end
  
  methods
    function NM = PointNeuronModel_${name}(Neuron, number)
      NM = NM@PointNeuronModel(Neuron, number);
#foreach ($s in $state.keySet())
   #if (($s == "V") || ( $s == "v" ))
      #if ( $state.get($s)==0)
         NM.v = $state.get($s).* ones(number, 1);
      #else
         NM.v=Neuron.$state.get($s).*ones(number,1);
      #end
   #else
      #if ( $state.get($s)==0)
         NM.$s = $state.get($s).*ones(number,1);
      #else 
         NM.v = Neuron.$state.get($s).*ones(number,1);
      #end
   #end
#end
         NM.spikes = [];
    end
    
    function [NM] = updateNeurons(NM, IM, N, SM, dt)
      I_syn = PointNeuronModel.sumSynapticCurrents(SM);
      I_input = PointNeuronModel.sumInputCurrents(IM);


#foreach ($d in $dynamics.keySet())
   #set( $variable = $dynamics.get($d) )
   #if (( $d == "V" ) || ($d == "v") )
       #foreach ($s in $state.keySet())
          #if (($s == "V") || ($s == "v") )
            #set( $variable = $variable.replace("$s","NM.v") )
          #else
            #set( $variable = $variable.replace("$s","NM.$s") )
          #end 
       #end
       #foreach ($par in $parameters.keySet() )
          #set( $variable = $variable.replace("$par","N.$par") )
       #end
      kv=$variable;
   #else
       #foreach ($s in $state.keySet())
          #if (($s == "V") || ($s == "v") )
            #set( $variable = $variable.replace("$s","NM.v") )
          #else
            #set( $variable = $variable.replace("$s","NM.$s") )
          #end 
       #end
       #foreach ($par in $parameters.keySet() )
          #set( $variable = $variable.replace("$par","N.$par") )
       #end
       k$d=$variable;
   #end
#end
      
      
#foreach ($s in $state.keySet())
   #if (($s == "V" ) || ($s == "v"))
      k2v_in = NM.v + 0.5 .* dt .* kv;
   #else
      k2($s)in=NM.$s + 0.5.*dt.*k$s;
   #end

#end

#foreach ($d in $dynamics.keySet())
   #set( $variable = $dynamics.get($d) )
   #if (( $d == "V" ) || ($d == "v") )
       #foreach ($s in $state.keySet())
          #if (($s == "V") || ($s == "v"))
            #set( $variable = $variable.replace("$s","k2v_in") )
          #else
             #set( $variable = $variable.replace("$s","NM.$s") )
          #end 
       #end
       #foreach ($par in $parameters.keySet() )
          #set( $variable = $variable.replace("$par","N.$par") )
       #end
      kv=$variable;
   #else
       #foreach ($s in $state.keySet())
          #if (($s == "V") || ($s == "v") )
            #set( $variable = $variable.replace("$s","NM.v") )
          #elseif ($s == $d)
            #set( $variable = $variable.replace("$s","k2($s)in") )
          #else
            #set( $variable = $variable.replace("$s","NM.$s") )
          #end 
       #end
       #foreach ($par in $parameters.keySet() )
          #set( $variable = $variable.replace("$par","N.$par") )
       #end
       k$d=$variable;
   #end
#end
#foreach ($d in $dynamics.keySet())
   #if (($d == "V" ) || ($d == "v"))
      NM.v = NM.v + dt .* kv;
   #else
      NM.$d=NM.$d + dt.*k$d;
   #end

#end
   
#foreach ($E in $events.keySet() )
   #if ( $events.get($E) != []  )
       %% things to do 

   #end

#end

    end
    
    function spikes = get.spikes(NM)
      spikes = NM.spikes;
    end
    
    function NM = randomInit(NM, N)
      %%
      %%
    end
  end % methods
  

  methods(Static)
    
    function params = getRequiredParams()
      params = [getRequiredParams@PointNeuronModel, ...
                {#foreach ($par in $parameters.keySet())'$par',#end}];
    end
    
  end
end % classdef




